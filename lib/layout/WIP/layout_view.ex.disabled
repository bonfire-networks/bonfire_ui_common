defmodule Bonfire.UI.Common.LayoutView do
  use Bonfire.UI.Common.Web, {:layout_view, [namespace: Bonfire.UI.Common]}

  # NOTE: this is an attempt at having the layout be handled by Surface, but causes issues with the passing of __context__ to child components

  def render("app.html", assigns) do
    ~F"""
    {@inner_content}
    """
  end


  def render("root.html", assigns) do
    ~F"""
    <!DOCTYPE html>
    <html class="overflow-hidden bg-base-300" lang="en" data-theme={ Bonfire.Me.Settings.get([:ui, :theme, :instance_theme], "bonfire", @__context__)}>
      <head>
        <meta charset="utf-8"/>
        {live_title_tag to_string(e(assigns, :page_title, l "Home")), suffix: " Â· Bonfire"}

        <meta name="description" content="Bonfire instance">
        <meta name="keywords" content="bonfire, fediverse">
        <meta name="author" content="Bonfire">

        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        {raw Config.get!(:endpoint_module).include_assets(@conn, :top)}

        <meta :if={e(assigns, :no_index, nil)} name="robots" content="noindex" />

        {csrf_meta_tag()}
      </head>
      <body id="layout-root" class="">
        <style>
          .shadow {
            box-shadow: 0 1px 2px rgba(0,0,0,.2) !important
          }
        </style>
        { if Code.ensure_loaded?(Thesis.View), do: Thesis.View.thesis_editor(@conn) }

        {@inner_content}

        {raw Config.get!(:endpoint_module).include_assets(@conn, :bottom)}
      </body>
    </html>
    """
  end


  def render("live.html", assigns) do
    assigns
    |> IO.inspect(label: "assss")

    ~F"""
    <div
      id="layout-live"
      x-data="{
        smart_input_title_text: null,
        smart_input_open: false,
        smart_input_fullscreen: false,
        smart_input_fullscreen: false,
        maximize_smart_input_modal() {
          if (!this.smart_input_open) {
            this.smart_input_open = true;
            return this.smart_input_fullscreen = true
          } else {
            return this.smart_input_fullscreen = true
          }
        }
      }"
    >
      <Bonfire.UI.Common.NavLive
        context={@__context__}
        without_sidebar={e(assigns, :without_sidebar, nil)}
        showing_within={e(assigns, :showing_within, nil)}
        hide_smart_input={e(assigns, :hide_smart_input, nil)}
        page_header_aside={e(assigns, :page_header_aside, nil)}
        page_header_drawer={e(assigns, :page_header_drawer, false)}
        page={e(assigns, :page, "")}
        page_title={e(assigns, :page_title, "")}
        inner_content={@inner_content}
        reply_to_id={e(assigns, :reply_to_id, "")}
        thread_id={e(assigns, :thread_id, "")}
        create_object_type={e(assigns, :create_object_type, nil)}
        to_boundaries={boundaries_or_default(e(assigns, :to_boundaries, nil), assigns)}
        to_circles={e(assigns, :to_circles, [])}
        thread_mode={e(assigns, :thread_mode, nil)}
        smart_input_prompt={e(assigns, :smart_input_prompt, nil)}
        smart_input_text={e(assigns, :smart_input_text, nil)}
        sidebar_widgets={e(assigns, :sidebar_widgets, [])}
        show_less_menu_items={e(assigns, :show_less_menu_items, false)}
      />

    </div>

    <Bonfire.UI.Common.ReusableModalLive
      id="modal"
    />

    <Bonfire.UI.Common.NotificationLive
      id="notification"
      notification={e(assigns, :notification, nil)}
      root_flash={@flash}
    />
    """
  end

end
