<table class="table table-fixed table-zebra">
  <thead>
    <tr>
      <th class="max-w-[200px]">Name</th>
      <th class="max-w-[200px]">Current value</th>
      <th :if={@scope != :instance and @type != :instance_config} class="max-w-[200px]">Default for instance</th>
      <th class="max-w-[200px]">Default in code</th>
      <th class="max-w-[200px]">Locations</th>
    </tr>
  </thead>
  <tbody>
    {#for item <- @settings}
      <tr class="hover">
        {#case Bonfire.Common.Settings.__get__(
            item.keys,
            item[:default_value],
            LiveHandler.scoped(@scope, @__context__)
          )}
          {#match current_value}
            {#case @editable? && find_type(e(item.opts, :type, nil), current_value, item.default)}
              {#match :boolean}
                <td colspan="2" class="p-0 text-sm">
                  <form name="settings" phx-change="Bonfire.Common.Settings:set">
                    <Bonfire.UI.Common.SettingsToggleLive
                      name={e(item.opts, :name, nil) || format_key_for_display(item.keys)}
                      description={e(item.opts, :description, nil)}
                      keys={item.keys}
                      default_value={item.default}
                      scope={@scope}
                    />
                  </form>
                </td>
              {#match String}
                <td colspan="2" class="p-0 text-sm">
                  <form name="settings" phx-submit="Bonfire.Common.Settings:set">
                    <Bonfire.UI.Common.SettingsInputLive
                      name={e(item.opts, :name, nil) || format_key_for_display(item.keys)}
                      description={e(item.opts, :description, nil)}
                      keys={item.keys}
                      default_value={item.default}
                      scope={@scope}
                    />
                  </form>
                </td>
              {#match number when number in [:number, Integer, Integer]}
                <td colspan="2" class="p-0 text-sm">
                  <form name="settings" phx-change="Bonfire.Common.Settings:set">
                    <Bonfire.UI.Common.Settings.NumberLive
                      name={e(item.opts, :name, nil) || format_key_for_display(item.keys)}
                      description={e(item.opts, :description, nil)}
                      keys={item.keys}
                      default_value={item.default}
                      scope={@scope}
                    />
                  </form>
                </td>
              {#match select when select in [:select, Map, List, Keyword]}
                {#case e(item.opts, :options, nil)}
                  {#match options when is_map(options) or is_list(options)}
                    <td colspan="2" class="p-0 text-sm">
                      <form name="settings" phx-change="Bonfire.Common.Settings:set">
                        <Bonfire.UI.Common.SettingsSelectLive
                          name={e(item.opts, :name, nil) || format_key_for_display(item.keys)}
                          description={e(item.opts, :description, nil)}
                          keys={item.keys}
                          options={options}
                          default_value={item.default}
                          scope={@scope}
                        />
                      </form>
                    </td>
                  {#match _}
                    <td class="p-4  text-sm">
                      {format_key_for_display(item.keys)}
                    </td>
                    <td class="p-2  text-sm">{format_value(current_value)}
                    </td>
                {/case}
              {#match _}
                <td class="p-4  text-sm">{format_key_for_display(item.keys)}
                </td>
                <td class="p-2  text-sm">{format_value(current_value)}
                </td>
            {/case}
        {/case}

        <th :if={@scope != :instance and @type != :instance_config}>{Bonfire.Common.Config.__get__(
            item.keys,
            item[:default_value],
            LiveHandler.scoped(@scope, @__context__)
          )
          |> format_value()}</th>

        <td class="p-2  text-sm whitespace-pre-wrap break-all">{#if is_nil(item.default) and item.defaults != []}<span class="badge badge-error">Warning: multiple defaults</span>{#else}{format_value(item.default)}{/if}</td>
        <td class="p-2 text-xs">
          {#for loc <- item.locations}
            <div class="mb-1">
              <span class="">{String.replace(loc.module, ~r/^"Elixir\./, "") |> String.replace(~r/"$/, "")}</span>
              @ <span class="code">{Path.basename(loc.file)}:{loc.line}</span>
              {#if not is_nil(loc.default) and loc.default != item.default}
                <span class="strong">Default: {format_value(loc.default)}</span>
              {/if}
            </div>
          {/for}
        </td>
      </tr>
    {/for}
  </tbody>
</table>