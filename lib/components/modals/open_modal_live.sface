<div class="w-full open_modal_wrapper" id={@id}>
  {#if current_user(@__context__)}
    {#case @href}
      {#match nil}
        <div
          data-role="open_modal"
          :on-click={@click_open_event}
          class={"open_modal_btn_wrapper", @open_btn_wrapper_class}
          phx-hook={@open_btn_hook}
          {...@open_btn_opts}
        >
          <#slot {@open_btn, value: @value}>
            <span class={@open_btn_class}>
              {@open_btn_text || "Open modal"}
            </span>
          </#slot>
        </div>
      {#match _href}
        <a
          :on-click={@click_open_event}
          class={@open_btn_wrapper_class}
          phx-hook={@open_btn_hook}
          href={@href}
          {...@open_btn_opts}
        >
          <#slot {@open_btn, value: @value}>
            <span class={@open_btn_class}>
              {@open_btn_text || "Open modal"}
            </span>
          </#slot>
        </a>
    {/case}
  {#else}
    {#if @enable_fallback}
      {!-- FIXME: make this fallback modal (which doesn't require LV) work when this component is included in a dropdown. For now we simply don't render a modal and instead show action_btn (or a link if href is provided) if enable_fallback is not set.
     --}

      <Bonfire.UI.Common.InlineModalLive
        id={@id}
        title={@title}
        action_btns={@action_btns}
        cancel_btn={@cancel_btn}
        default={@default}
        open_btn={@open_btn}
        value={nil}
        ...{assigns}
      />
    {#else}
      {#case @href}
        {#match nil}
          <div class={@open_btn_wrapper_class} {...@open_btn_opts}>
            <#slot {@action_btns}>
            </#slot>
          </div>
        {#match _href}
          <a class={@open_btn_wrapper_class} href={@href} {...@open_btn_opts}>
            <#slot {@open_btn, value: @value}>
            </#slot>
          </a>
      {/case}
    {/if}
  {/if}
</div>
