<div
  id={@id}
  data-theme={if Settings.get(
       [:ui, :theme, :preferred],
       :system,
       assigns[:__context__] || assigns[:current_user] || @conn
     ) == :light,
     do:
       Settings.get(
         [:ui, :theme, :instance_theme_light],
         "light",
         assigns[:__context__] || assigns[:current_user] || @conn
       ),
     else:
       Settings.get(
         [:ui, :theme, :instance_theme],
         "bonfire",
         assigns[:__context__] || assigns[:current_user] || @conn
       )}
  class={
    "transition-opacity transform duration-300 ease-in-out",
    @modal_class,
    "modal modal-bottom sm:modal-middle max-h-[100%] z-[999999999999999999]": !@no_backdrop,
    "fixed left-0 z-[99999999] bottom-0": @no_backdrop,
    "opacity-0 scale-100 modal-closed": !@show,
    "opacity-100 scale-100 translate-y-0 modal-open": @show
  }
  {...@opts}
>
  <div
    :if={!@no_backdrop}
    phx-click="close"
    phx-target={"[id='#{@id}']"}
    class="fixed inset-0 transition-opacity bg-slate-600/60 backdrop-blur-md -z-1"
    aria-hidden="true"
  >
  </div>
  {!-- if the modal should be wrapped in a form use the form tag, otherwise use a div --}
  <Phoenix.Component.dynamic_tag
    tag_name={if @form_opts != %{}, do: "form", else: "div"}
    id={@form_opts[:id] || "#{@id}_box"}
    class={Surface.css_class([
      "text-base-content",
      "modal-box p-4": !@image_preview,
      "h-full": @no_backdrop,
      "!max-w-[52rem]": @xl
    ])}
    {...Enums.naughty_to_atoms!(@form_opts)}
  >
    <div class={
      "relative z-[99999]",
      @wrapper_class
    }>
      <h3 :if={!@no_header} class={@title_class || "font-bold text-base line-clamp-1 px-2 max-w-full"}>
        <#slot {@title}>{@title_text}</#slot>
      </h3>
      

      <div
        class={
          "transition ease-in-out duration-50 transition-all",
          "max-h-[calc(100vh_-_13rem)]": !@image_preview,
          "h-[95%]": @no_backdrop,
          "overflow-y-auto": @overflow
        }
        data-id="modal-contents"
      >
        <#slot {@default, autocomplete: @autocomplete, value: @value}>
          {!-- TODO: consolidate with PreviewContent and make modal_component & modal_view seperate props --}
          {#if e(@modal_assigns, :modal_component_stateful?, nil) == true and
              module_enabled?(@modal_assigns[:modal_component], @__context__)}
            <StatefulComponent
              id="modal_component"
              module={@modal_assigns[:modal_component]}
              {...@modal_assigns}
            />
          {#elseif not is_nil(e(@modal_assigns, :modal_component, nil)) and
              module_enabled?(@modal_assigns[:modal_component], @__context__)}
            <StatelessComponent
              module={@modal_assigns[:modal_component]}
              myself={@myself}
              {...@modal_assigns}
            />
          {#elseif not is_nil(e(@modal_assigns, :modal_view, nil)) and
              module_enabled?(@modal_assigns[:modal_view], @__context__)}
            {live_render(@socket, @modal_assigns[:modal_view],
              id: "modal_view",
              session: %{"params" => @modal_assigns}
            )}
          {#else}
            {!-- empty --}
          {/if}
        </#slot>
      </div>

      <div :if={!@no_actions} class="modal-action">
        <div phx-click="close" phx-target={"[id='#{@id}']"}>
          <#slot {@cancel_btn}>
            <!-- <button class={@cancel_btn_class || "btn btn-outline btn-sm"} type="button">{@cancel_label || l("Close")}</button> -->
          </#slot>
        </div>
        <div class={@action_btns_wrapper_class}>
          <#slot {@action_btns}>
            <button :if={@form_opts != %{}} class="normal-case btn btn-primary btn-sm" type="submit">{l("OK")}</button>
          </#slot>
        </div>
      </div>

      <div class={
        "absolute top-0 right-0 block z-600",
        "!-top-1 !right-0": !@no_backdrop,
        "z-[999999999] !top-1 h-full": @no_backdrop
      }>
        <button
          phx-click="close"
          phx-target={"[id='#{@id}']"}
          type="button"
          class={
            "normal-case btn-sm btn-ghost btn btn-circle opacity-70",
            "!rounded-none !btn-xs btn-secondary": @no_backdrop
          }
        >
          <span class="sr-only">{l("Close")}</span>
          <#Icon outline="X" class="w-5 h-5" />
        </button>
      </div>
    </div>
  </Phoenix.Component.dynamic_tag>
</div>
