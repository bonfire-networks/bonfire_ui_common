<!-- FIMXE: this should be in the main app layout to support dark/light themes 
<div
  x-data={"{
    prefersDarkTheme: window.matchMedia('(prefers-color-scheme: dark)').matches,
    dark_theme: $el.dataset.theme,
    light_theme: '#{Settings.get(
          [:ui, :theme, :instance_theme_light],
          "light",
          @current_user || @__context__ || @conn
        )}'
    }"}
  x-init="window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => { prefersDarkTheme = e.matches; });"
  x-bind:data-theme="prefersDarkTheme ? dark_theme : light_theme"
-->

<!-- {#case Settings.get([:ui, :themes], ["bonfire"], @__context__)}
  {#match themes}
    {#case Settings.get([:ui, :themes_light], ["light"], @__context__)}
      {#match themes_light}
        <Bonfire.UI.Common.ChangeThemeLive
          label={l("Change theme")}
          key="instance_theme"
          theme={@theme}
          themes={Enum.uniq(themes_light)}
        />

        <Bonfire.UI.Common.ChangeThemeLive
          label={l("Light theme")}
          key="instance_theme_light"
          theme={@theme_light}
          themes={Enum.uniq(themes_light ++ themes)}
        />
    {/case}
{/case} -->

<div
  class="w-full max-w-lg mt-4 form-control"
  x-data="{
        light: true,
        dark: true,
        custom_theme: false
      }"
>
  <!-- <div class="mt-1 mb-4 sm:mt-0 sm:col-span-2">
              <div class="flex max-w-lg">
                <div class="flex flex-col gap-1">
                  <div class="text-sm font-bold">{l("Use device theme")}</div>
                </div>
                <form name="settings" phx-change="Bonfire.Me.Settings:set">
                <input name="scope" value={:user} type="hidden">
                <input
                  type="radio"
                  name="ui[device_theme]"
                  {if Settings.get([:ui, :device_theme, false], false, :user), do: "checked", else: ""}
                  value={Settings.get([:ui, :device_theme, false], false, :user)}
                  class="toggle"
                />
                </form>
              </div>
            </div> -->
  <div class="flex items-center gap-2">
    <button
      type="button"
      x-on:click="dark = true; light = false; custom_theme=false"
      class="normal-case rounded btn btn-outline border-base-content/30"
    >
      <span><Icon outline="Moon" class="w-4 h-4" /></span>
      <span class="ml-2">{l("Dark Mode")}</span>
    </button>

    <button
      type="button"
      x-on:click="dark = false; light = true; custom_theme=false"
      class="normal-case rounded btn btn-outline border-base-content/30"
    >
      <span><Icon outline="Sun" class="w-4 h-4" /></span>
      <span class="ml-2">{l("Light Mode")}</span>
    </button>

    <button
      type="button"
      x-on:click="dark = true; light = true; custom_theme=false"
      class="normal-case rounded btn btn-outline border-base-content/30"
    >
      <span><Icon outline="ComputerDesktop" class="w-4 h-4" /></span>
      <span class="ml-2">{l("System")}</span>
    </button>

    <button
      type="button"
      x-on:click="dark = false; light = false; custom_theme = !custom_theme"
      class="normal-case rounded btn btn-outline border-base-content/30"
    >
      <span><Icon outline="ComputerDesktop" class="w-4 h-4" /></span>
      <span class="ml-2">{l("Custom")}</span>
    </button>
  </div>

  <div class="flex max-w-lg gap-3 mt-3">
    {#case Settings.get([:ui, :themes], ["bonfire"], @scoped)}
      {#match themes}
        {#case Settings.get([:ui, :themes_light], ["light"], @scoped)}
          {#match themes_light}
            <div x-show="dark">
              <Bonfire.UI.Common.ChangeThemeLive
                label={l("Dark theme")}
                key="instance_theme"
                theme={@theme}
                themes={Enum.uniq(themes)}
              />
            </div>
            <div x-show="light">
              <Bonfire.UI.Common.ChangeThemeLive
                label={l("Light theme")}
                key="instance_theme_light"
                theme={@theme}
                themes={Enum.uniq(themes_light)}
              />
            </div>
        {/case}
    {/case}
  </div>
  <div x-show="custom_theme" x-cloak x-collapse>
    <div class="flex items-center gap-2 mt-5 text-sm">
      <Icon iconify="lucide:paintbrush-2" class="w-4 h-4" />
      <span class="">{l("Customise theme colours")}</span>
    </div>
    <div
      :for={{key, colour} <-
        DaisyTheme.theme(Enums.stringify_keys(Settings.get([:ui, :theme, :custom], %{}, @scoped)))}
      id={key}
      class="mt-1 mb-4 sm:mt-0 sm:col-span-2"
      phx-hook="ColourPicker"
      data-scope={@scope}
      x-data="{
        open: false
      }"
      x-on:click.outside="open = false"
    >
      <label x-on:click="open = !open"><div class="w-10">{key}:</div> <hex-input color={colour} /></label>
      <hex-color-picker x-show="open" />
    </div>
  </div>
</div>