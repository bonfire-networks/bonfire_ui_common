<div class={@wrapper_class} data-type="widget">
  {#case @widget[:type]}
    {#match :link}
      <LinkLive
        to={if is_function(@widget[:href]),
          do: @widget[:href].(@__context__[:current_params]),
          else: @widget[:href]}
        class={if @showing_within != :dashboard,
          do: "flex items-center w-full gap-4 px-2 py-2 rounded-md",
          else: "block w-full"}
      >
        <div class="flex-1 flex items-center gap-4">
          <span :if={!@without_icon} class="">
            <Iconify.iconify icon={widget(@widget, @__context__)[:icon]} class={@icon_class} />
          </span>
          <span
            :if={(not is_nil(@widget[:page]) and (@page == @widget[:page] or @selected_tab == @widget[:page])) or
              (not is_nil(@widget[:module]) and e(@__context__, :current_view, nil) == @widget[:module])}
            class="sr-only"
          >{l("Current Page:")}
          </span>
          <span class={@text_class}>{@widget[:text] || widget(@widget, @__context__)[:name]}</span>
        </div>
        {#case widget(@widget, @__context__)[:badge]}
          {#match nil}
          {#match badge}
            <div class="flex items-center place-content-center">
              <Dynamic.LiveComponent
                id={badge[:id] || Pointers.ULID.generate()}
                module={Bonfire.UI.Common.BadgeCounterLive}
                feed_id={badge[:feed_id] || e(@current_user, :character, badge[:feed_key], nil)}
              />
            </div>
        {/case}
      </LinkLive>
    {#match Surface.Component}
      <Dynamic.Component
        module={@widget[:module]}
        showing_within={@showing_within}
        page={@page}
        {...@data}
      />
    {#match Surface.LiveComponent}
      <Dynamic.LiveComponent
        id={Pointers.ULID.generate()}
        module={@widget[:module]}
        page={@page}
        showing_within={@showing_within}
        {...@data}
      />
    {#match nil}
    {#match other}
      {error(other) && "<!-- invalid widget -->"}
  {/case}
</div>