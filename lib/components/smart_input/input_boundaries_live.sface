

  {#if Config.get(:experimental_features_enabled)}
    <div   
    class="flex"
    >
    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesDropdownLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesDropdownLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
    />
    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesSelectionLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesSelectionLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
      activity_type_or_reply={Bonfire.UI.Common.SmartInputLive.activity_type_or_reply(assigns)}
    />

    <button type="button" 
      x-show="!open_boundaries"
      class="btn btn-ghost" 
      phx-click="open_boundaries"
      phx-target="#smart_input"
      @click="open_boundaries = true">
      <Solid.ChevronRightIcon />
    </button>

    <button type="button" 
      x-show="open_boundaries"
      class="btn btn-ghost" 
      @click="open_boundaries = false">
      <Outline.CheckIcon />
    </button>

  </div>

  <div x-show="open_boundaries">

    <ul class="mt-3"> 

      <li class="flex items-center justify-between flex-1 p-3 mb-3 border rounded hover:bg-base-content/5 border-base-content/30">

        <label phx-click={JS.push("select_boundary", value: %{id: "public", name: l "Public"}, target: "#smart_input")}>
          <div class="">
            <div class="flex items-center space-x-2">
              <Solid.GlobeIcon/>
              <div class="text-base font-semibold">{l "Public"}</div>
            </div>
            <div class="text-sm text-base-content/80">
             {l "Publicly visible to everyone on the fediverse and in search engines"}
            </div>
          </div>

          <div class="flex-none">
            <!-- <input 
              value={acl.id}
              type="checkbox"
            /> -->
            <Solid.PlusCircleIcon/>

          </div>
        </label>
      </li>

      <li class="flex items-center justify-between flex-1 p-3 mb-3 border rounded hover:bg-base-content/5 border-base-content/30">

        <label phx-click={JS.push("select_boundary", value: %{id: "local", name: l "Local Instance"}, target: "#smart_input")}>
          <div class="">
            <div class="flex items-center space-x-2">
              <Solid.LocationMarkerIcon/>
              <div class="text-base font-semibold">{l "Local Instance"}</div>
            </div>
            <div class="text-sm text-base-content/80">
             {l "Visible to all members of this instance"}
            </div>
          </div>

          <div class="flex-none">
            <!-- <input 
              value={acl.id}
              type="checkbox"
            /> -->
            <Solid.PlusCircleIcon/>

          </div>
        </label>
      </li>

      <li class="flex items-center justify-between flex-1 p-3 mb-3 border rounded hover:bg-base-content/5 border-base-content/30">

        <label phx-click={JS.push("select_boundary", value: %{id: "mentions", name: l "Mentions"}, target: "#smart_input")}>
          <div class="">
            <div class="flex items-center space-x-2">
              <Solid.AtSymbolIcon/> 
              <div class="text-base font-semibold">{l "Mentions"}</div>
            </div>
            <div class="text-sm text-base-content/80">
             {l "Visible only to those mentioned, across the fediverse"}
            </div>
          </div>

          <div class="flex-none">
            <!-- <input 
              value={acl.id}
              type="checkbox"
            /> -->
            <Solid.PlusCircleIcon/>

          </div>
        </label>
      </li>

  </ul>

    <Surface.Components.Dynamic.LiveComponent
      :if={@open_boundaries && module_enabled?(Bonfire.Boundaries.Web.MyAclsListLive)}
      module={Bonfire.Boundaries.Web.MyAclsListLive}
      id="my_boundaries"
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      hide_breakdown={true}  
      ui_for_setting_boundaries={true}
      click_override={true}
      select_event="select_boundary"
    />
  </div>

  {#else}

    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesDropdownLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesDropdownLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
    />

  {/if}


  <div 
    :if={@show_select_recipients}
    class="p-3 pb-0">
    <Bonfire.UI.Common.SelectRecipientsLive
      showing_within={@showing_within}
      preloaded_recipients={e(assigns, :preloaded_recipients, [])}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
    />
  </div>
