

  {#if Config.get(:experimental_features_enabled)}
    <div   
    class="flex"
    >
    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesDropdownLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesDropdownLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
    />
    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesSelectionLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesSelectionLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
      activity_type_or_reply={Bonfire.UI.Common.SmartInputLive.activity_type_or_reply(assigns)}
    />

    <button type="button" 
      x-show="!open_boundaries"
      class="btn btn-ghost" 
      phx-click="open_boundaries"
      phx-target="#smart_input"
      @click="open_boundaries = true">
      <Solid.ChevronRightIcon />
    </button>

    <button type="button" 
      x-show="open_boundaries"
      class="btn btn-ghost" 
      @click="open_boundaries = false">
      <Outline.CheckIcon />
    </button>

  </div>

  <div x-show="open_boundaries">
    <Surface.Components.Dynamic.LiveComponent
      :if={@open_boundaries && module_enabled?(Bonfire.Boundaries.Web.MyAclsListLive)}
      module={Bonfire.Boundaries.Web.MyAclsListLive}
      id="my_boundaries"
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      hide_breakdown={true}  
      show_checkboxes={true}
      click_override={true}
      select_event="select_boundary"
    />
  </div>

  {#else}

    <Surface.Components.Dynamic.Component
      :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesDropdownLive) && e(assigns, :thread_mode, nil) != :flat}
      module={Bonfire.Boundaries.Web.BoundariesDropdownLive}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      thread_mode={e(assigns, :thread_mode, nil)}
    />

  {/if}


  <div 
    :if={@show_select_recipients}
    class="p-3 pb-0">
    <Bonfire.UI.Common.SelectRecipientsLive
      showing_within={@showing_within}
      preloaded_recipients={e(assigns, :preloaded_recipients, [])}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
    />
  </div>
