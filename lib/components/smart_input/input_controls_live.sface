<div class="flex-1 h-full bg-base-100 rounded-b-xl">
  <div class="flex-1 h-full grow" id="compose_content_wrapper">
    <div class="relative !flex flex-col flex-1 h-full">
      {!-- here was old/loader.svg --}
      <div id="composer_wrapper" class="h-full flex flex-col">
        <div class="h-full flex flex-col flex-1 grow relative">
          <div
            class="hidden"
            :if={@enable_thread_title}
            id="smart_input_thread_title"
            phx-update={if @reset_smart_input, do: "replace", else: "ignore"}
          >
            <div class="relative p-2 pb-0 bg-base-100">
              <label class="input w-full">
                <#Icon iconify="icomoon-free:blog" class="w-4 h-4 opacity-50" />
                <input
                  value={@smart_input_opts[:title]}
                  name={:name}
                  class="w-full"
                  placeholder={l("Enter the article title")}
                />
                {!-- <kbd class="kbd kbd-sm">âŒ˜</kbd>
              <kbd class="kbd kbd-sm">K</kbd> --}
              </label>
            </div>
          </div>

          {!-- fixed phx-update behavior to properly reset CW field --}
          <div
            phx-update={if @reset_smart_input, do: "replace", else: "ignore"}
            class={if !e(@smart_input_opts, :cw, nil), do: "hidden"}
            id="smart_input_post_title"
          >
            <div class="p-2">
              <label class="input w-full">
                <#Icon iconify="ri:alert-fill" class="w-4 h-4" />
                <input
                  name="post[post_content][summary]"
                  type="text"
                  placeholder={l("Enter an optional content warning")}
                  value={e(@smart_input_opts, :cw, nil)}
                />
              </label>
            </div>
          </div>

          {!-- UPLOADS PREVIEWS --}
          <Bonfire.UI.Common.UploadPreviewsLive :if={@uploads != false} uploads={@uploads} />

          {!-- SLOT WITH EXTRA FORM INPUTS DEPENDING ON THE TYPE OF OBJECT TO CREATE --}
          <#slot {@default} />
        </div>
      </div>

      <div class={
        "z-50 sticky bg-base-100 bottom-0 h-[48px] rounded-b-xl order-first lg:order-last",
        "order-first !bg-base-content/10": @showing_within == :page
      }>
        <div class="">
          <div class="flex justify-between gap-2 p-2 rounded-b-xl md:items-center  md:px-3 py-2">
            <div class="flex items-center gap-2">
              <Bonfire.UI.Common.UploadButtonLive
                :if={@uploads != false && e(@smart_input_opts, :create_object_type, nil) not in ["message"]}
                uploads={@uploads}
                max_uploads={Bonfire.Common.Settings.get(
                  [Bonfire.UI.Common.SmartInputLive, :max_uploads],
                  :instance,
                  current_user: current_user(@__context__),
                  name: l("Maximum Uploads"),
                  description: l("Maximum number of files that can be uploaded at once.")
                )}
              />

              <!-- data-close-on-inside-click="true" -->
              <div data-tip={l("Insert emoji")} class="tooltip tooltip-top">
                <div phx-hook="Tooltip" phx-update="ignore" id="emoji_picker_in_composer" data-trigger="click">
                  <button
                    title={l("Insert emoji")}
                    type="button"
                    class="tooltip-button emoji-button btn btn-ghost btn-square btn-sm"
                  >
                    <#Icon iconify="lucide-lab:bear-face" class="w-4 h-4 text-base-content/70" />
                  </button>
                  <div
                    id="emoji-picker-in-composer"
                    class="emoji-picker-in-composer w-60 tooltip absolute bottom-full right-0 z-50 mb-2 hidden"
                    data-emojis={@custom_emojis}
                  />
                </div>
              </div>

              <div
                :if={e(@smart_input_opts, :create_object_type, nil) in ["message", "post", nil]}
                title={l("Mark the activity as sensitive")}
                class="relative z-30 flex items-center tooltip tooltip-top"
                data-tip={l("Mark the activity as sensitive")}
                id="sensitive_btn"
                phx-update="ignore"
              >
                <label
                  phx-click={Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded(
                    "#smart_input_post_title",
                    ".btn_cw_toggle",
                    "btn-active"
                  )}
                  class="swap items-center btn btn-ghost btn-square btn-sm btn_cw_toggle"
                >
                  <input type="checkbox" name="sensitive">
                  <#Icon iconify="ri:alert-line" class="swap-off w-4 h-4 text-base-content/70" />
                  <#Icon iconify="ri:alert-fill" class="swap-on w-4 h-4 text-base-content/70" />
                </label>
              </div>

              <!-- <div
                data-position="top"
                phx-hook="Tooltip"
                id={"smart_input_more_options"}
                class="relative"
              >
                <label
                  class="tooltip-button emoji-button btn btn-ghost btn-square btn-sm"
                  tabindex="0"
                  role="button"
                  aria-haspopup="true"
                  aria-expanded="true"
                >
                  <#Icon iconify="heroicons:squares-plus" class="w-5 h-5 text-base-content/70" />
                </label>
                <ul
                  tabindex="0"
                  class="tooltip z-[99999999] menu shadow-sm bg-base-100 border border-base-content/10 w-52 absolute rounded-xl top-0 left-0 hidden"
                  role="menu"
                  aria-orientation="vertical"
                >
                  <li><button type="button" class="flex items-center gap-2">
                  <#Icon iconify="dashicons:text-page" class="w-4 h-4 text-base-content/70" />
                  {l "Create a post"}</button></li>
                  <li><button type="button">
                  <#Icon iconify="icomoon-free:blog" class="w-4 h-4 text-base-content/70" />
                  {l "Create an article"}</button></li>
                  </ul>
                </div> -->
              <div data-tip={l("Add a title")} class="tooltip tooltip-top">
                <button
                  :if={@enable_thread_title}
                  type="button"
                  phx-click={Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded(
                    "#smart_input_thread_title",
                    ".btn_title_toggle",
                    "btn-active"
                  )}
                  class="title-button btn btn-ghost btn-square btn-sm"
                >
                  <#Icon iconify="icomoon-free:blog" class="w-4 h-4 text-base-content/70" />
                </button>
              </div>
            </div>

            <div class="flex items-center gap-2">
              {#if e(@smart_input_opts, :create_object_type, nil) != "message" ||
                  !e(@smart_input_opts, :recipients_editable, nil)}
                <StatelessComponent
                  module={maybe_component(Bonfire.UI.Boundaries.SetBoundariesButtonLive, @__context__)}
                  to_boundaries={@to_boundaries}
                  boundary_preset={@boundary_preset}
                  preview_boundary_for_id={@preview_boundary_for_id}
                  preview_boundary_for_username={@preview_boundary_for_username}
                  preview_boundary_verbs={@preview_boundary_verbs}
                  to_circles={@to_circles}
                  exclude_circles={@exclude_circles}
                />
              {/if}

              <button
                type="submit"
                id="submit_btn"
                x-on:click="$dispatch('submit')"
                phx-disable-with
                class="btn-sm btn btn-primary"
                disabled={@smart_input_opts[:submit_disabled]}
              >
                <!-- <#Icon iconify="mdi:email-fast-outline" class="w-4 h-4" /> -->
                <#Icon iconify="lucide:arrow-up" class="w-4 h-4" />
                <!-- {#if e(@smart_input_opts, :create_object_type, nil) == "message"}
                  <span class="sr-only">{l("Send")}</span>
                {#else} -->
                <span class="">{l("Post")}</span>
                <!-- {/if} -->
              </button>
            </div>
          </div>
        </div>

        <input type="hidden" name="thread_id" value={e(@smart_input_opts, :id, nil)}>

        <input type="hidden" name="reply_to[reply_to_id]" value={@reply_to_id}>
        <input type="hidden" name="reply_to[thread_id]" value={@context_id}>
        {!-- FIXME: should not thread using context like a group or topic --}
        <input type="hidden" name="context_id" value={@context_id}>
        <input
          type="hidden"
          name={:create_object_type}
          value={e(@smart_input_opts, :create_object_type, nil)}
        />

        <StatelessComponent
          module={maybe_component(Bonfire.UI.Boundaries.BoundariesSelectionLive, @__context__)}
          to_boundaries={@to_boundaries}
          to_circles={@to_circles}
          exclude_circles={@exclude_circles}
          context_id={@context_id}
        />

        <label>
          <input :for={mention <- e(@mentions, [])} type="hidden" name="mentions[]" value={mention}>
        </label>
        <label>
          <input
            :for={{circle, role} <- e(@to_circles, []) |> debug("to_circless_on_publish")}
            type="hidden"
            data-role="circle-enum"
            name={"to_circles[#{id(circle)}]"}
            value={role}
          />
        </label>
        <label>
          <input
            :for={{circle, role} <- e(@exclude_circles, []) |> debug("exclude_circless_on_publish")}
            type="hidden"
            data-role="circle-enum"
            name={"to_circles[#{id(circle)}]"}
            value={role}
          />
        </label>
        <label>
          <input
            :for={value when is_binary(value) <- e(@to_circles, [])}
            type="hidden"
            data-role="circle-binary"
            name="to_circles[]"
            value={value}
          />
        </label>
      </div>
    </div>
  </div>
</div>
