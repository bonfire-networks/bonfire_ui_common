
<Bonfire.UI.Social.UploadPreviewsLive uploads={@uploads} />


<div class="">
  <Surface.Components.Dynamic.Component
    :if={module_enabled?(Bonfire.Boundaries.Web.BoundariesLive)}
    module={Bonfire.Boundaries.Web.BoundariesLive}
    to_circles={e(assigns, :to_circles, [])}
    />

    <div class="flex items-center justify-between p-2 space-x-2 border-t rounded-b-md border-slate-300 bg-slate-200 sm:px-3">
      <div class="flex items-center flex-1 space-x-1">
        <Bonfire.UI.Common.UploadButtonLive
          :if={module_enabled?(Bonfire.Files)}
          uploads={e(assigns, :uploads, nil)}
        />

        <div 
          data-tip={l "Add a content warning" }
          class="relative z-20 flex items-center tooltip tooltip-bottom">
          <button
            :if={Bonfire.Common.Config.get([:ui, :smart_input, :cw], []) == true}
            type="button"
            @click="title_open = !title_open"
            :class="{'bg-slate-300' : title_open}"
            class="flex items-center btn btn-ghost btn-sm btn-circle">
            <span 
              class="text-xs font-medium text-base-content text-opacity-70">{l "CW"}</span>
          </button>
        </div>
        
        <div 
          data-tip={l "Full-screen mode" }
          class="relative z-20 flex items-center tooltip tooltip-bottom">
            <button 
              type="button"
              @click="distraction_free = !distraction_free"
              :class="{'bg-slate-300' : distraction_free}"
              class="flex items-center btn btn-ghost btn-sm btn-circle">
            <Solid.EyeIcon class="w-4 h-4 mx-auto text-base-content text-opacity-70" />
          </button>
        </div>

      </div>
      <button type="submit" class="capitalize btn-sm justify-self-end btn btn-primary">
        <!-- {if e(assigns, :create_activity_type, nil) == :message, do: l "Message", else: l "Post"} -->
        {l "Post"}
      </button>
    </div>
  
  <input type="hidden" 
    name="reply_to[reply_to_id]" 
    value={@reply_to_id} />
  <input type="hidden"  
    name="reply_to[thread_id]" 
    value={@thread_id} />

  <input type="hidden" 
    name={:create_activity_type}
    value={@create_activity_type} />

  <input 
    :for={circle <- e(assigns, :to_circles, [])} 
    type="hidden" 
    name="to_circles[]" 
    label={if is_tuple(circle), do: elem(circle, 0)} 
    value={if is_tuple(circle), do: elem(circle, 1), else: circle} 
  />
</div>