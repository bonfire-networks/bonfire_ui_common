<div x-show="!open_boundaries">
  <Bonfire.UI.Social.UploadPreviewsLive uploads={@uploads} />

  <div class="">
    <div class={
      "flex flex-col md:flex-row md:items-center justify-between p-2 gap-3 border-t rounded-b-md border-base-content/10 bg-base-200 sm:px-3",
      "!border-none !bg-base-100 mt-2 !p-0": @thread_mode == :flat
    }>
      <div class="flex items-center flex-1 gap-3">
        <Bonfire.UI.Common.UploadButtonLive
          :if={!is_messaging?(%{
            page: @page,
            showing_within: @showing_within,
            create_object_type: @create_object_type
          }) && module_enabled?(Bonfire.Files, @__context__)}
          uploads={@uploads}
          thread_mode={@thread_mode}
        />

        <div
          :if={@show_cw_toggle}
          data-tip={l("Add a content warning")}
          class="relative z-30 flex items-center tooltip tooltip-right"
        >
          <button
            :if={Config.get([:ui, :smart_input, :cw], []) == true}
            type="button"
            @click="title_open = !title_open"
            :class="{'border-base-content/30' : title_open}"
            class="flex items-center btn btn-ghost btn-sm btn-circle"
          >
            <span class="text-xs font-medium text-base-content text-opacity-70">{l("CW")}</span>
          </button>
        </div>

        <div phx-hook="EmojiPicker" id="editor_emoji">
          <div
            phx-update="ignore"
            x-data="{
          open: false,
          close(focusAfter) {
            if (! this.open) return
            this.open = false
            focusAfter && focusAfter.focus()
          }
        }"
            x-on:keydown.escape.prevent.stop="close($refs.button)"
          >
            <div @click="open = ! open" class="btn btn-ghost btn-sm text-[22px] btn-circle">
              <Icon iconify="entypo:emoji-happy" class="w-4 h-4 text-base-content text-opacity-70" />
            </div>
            <div
              x-cloak
              x-ref="panel"
              x-show="open"
              x-transition.origin.top.left
              x-on:click.outside="close($refs.button)"
              x-show="open"
              class={
                "absolute z-50",
                "bottom-10 left-3": @thread_mode == :flat,
                "bottom-10 left-3": @thread_mode != :flat,
                "!top-10 right-0 bottom-[auto]": @showing_within == :page
              }
              role="tooltip"
            >
              <div id="picker" />
            </div>
          </div>
        </div>

        <Bonfire.UI.Common.InputBoundariesLive
          thread_mode={@thread_mode}
          create_object_type={@create_object_type}
          to_boundaries={@to_boundaries}
          to_circles={@to_circles}
          preloaded_recipients={e(@preloaded_recipients, [])}
          showing_within={@showing_within}
          open_boundaries={@open_boundaries}
          show_select_recipients={@show_select_recipients}
          boundaries_modal_id={@boundaries_modal_id}
        />


        <!-- <div 
            :if={@showing_within != :page and @thread_mode != :flat}
            x-show="!smart_input_open"
            data-tip={l "Full-screen mode" }
            class={"relative z-20 flex items-center tooltip tooltip-right"}>
              <button 
                type="button"
                @click="smart_input_fullscreen = !smart_input_fullscreen"
                :class="{'border-base-content/30' : smart_input_fullscreen}"
                class="flex items-center btn btn-ghost btn-sm btn-circle">
              <Icon outline="ArrowsExpand" class="w-4 h-4 mx-auto text-base-content text-opacity-70" />
            </button>
          </div>  -->
      </div>
      <button
        type="submit"
        @click="$dispatch('submit')"
        phx-disable-with={if is_messaging?(%{
             page: @page,
             showing_within: @showing_within,
             create_object_type: @create_object_type
           }),
           do: l("Sending..."),
           else: l("Posting...")}
        class="capitalize md:btn-sm justify-self-end btn w-full md:w-[8rem] btn-primary"
      >
        {#if is_messaging?(%{
            page: @page,
            showing_within: @showing_within,
            create_object_type: @create_object_type
          })}
          {l("Send")}
        {#else}
          {@submit_label || l("Post")}
        {/if}
      </button>
    </div>

    <input type="hidden" name="id" value={e(@smart_input_opts, :id, nil)}>

    <input type="hidden" name="reply_to[reply_to_id]" value={@reply_to_id}>
    <input type="hidden" name="reply_to[thread_id]" value={@context_id}>

    <input type="hidden" name={:create_object_type} value={@create_object_type}>

    <input
      :for={circle <- @to_circles}
      type="hidden"
      name="to_circles[]"
      label={if is_tuple(circle), do: elem(circle, 0)}
      value={if is_tuple(circle), do: elem(circle, 1), else: circle}
    />
  </div>
</div>