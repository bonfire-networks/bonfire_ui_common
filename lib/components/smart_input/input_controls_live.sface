<div class="flex-1 h-full bg-base-100 rounded-b-xl">
  <div class="flex-1 h-full grow" id="compose_content_wrapper">
    <div class="relative !flex flex-col flex-1 h-full">
      {!-- here was old/loader.svg --}
      {!-- DM RECIPIENTS --}
      {#if @create_object_type == :message || e(@smart_input_opts, :recipients_editable, nil)}
        <div class="relative bg-base-100 p-2">
          <Bonfire.UI.Common.SelectRecipientsLive
            preloaded_recipients={e(@preloaded_recipients, [])}
            to_boundaries={@to_boundaries}
            to_circles={@to_circles}
            context_id={@context_id}
            is_editable={e(@smart_input_opts, :recipients_editable, true)}
          />
        </div>
      {/if}

      <div id="composer_wrapper" class="h-full flex flex-col">
        <div class="h-full flex flex-col flex-1 grow relative">
          <div
            class="hidden"
            :if={@enable_thread_title}
            id="smart_input_thread_title"
            phx-update={if @reset_smart_input, do: "replace", else: "ignore"}
          >
            <div class="relative p-2 border-b bg-base-100 border-base-content/10">
              <#Icon
                iconify="solar:text-bold"
                class="absolute w-5 h-5 stroke-1 top-[14px] left-3 text-base-content/70"
              />
              <label class="sr-only">{l("Title")}</label>
              <TextInput
                name={:name}
                opts={
                  placeholder: l("Type a title"),
                  "phx-debounce": "blur"
                }
                class="w-full h-8 pl-10 text-sm bg-transparent rounded input"
              />
            </div>
          </div>

          {!-- UPLOADS PREVIEWS --}
          <Bonfire.UI.Social.UploadPreviewsLive :if={@uploads != false} uploads={@uploads} />

          {!-- SLOT WITH EXTRA FORM INPUTS DEPENDING ON THE TYPE OF OBJECT TO CREATE --}
          <#slot {@default} />
        </div>
      </div>

      <div class={
        "z-50 sticky bg-base-100 bottom-0 h-[48px] rounded-b-xl",
        "order-first !bg-base-content/10": @showing_within == :page
      }>
        <div class="">
          <div class="flex justify-between gap-2 p-2 rounded-b-xl md:items-center  md:px-3 py-2">
            <Bonfire.UI.Common.UploadButtonLive
              :if={@uploads != false}
              uploads={@uploads}
              max_uploads={Bonfire.Common.Settings.get(
                [Bonfire.UI.Common.SmartInputLive, :max_uploads],
                :instance,
                current_user(@__context__)
              )}
            />

            <button
              title={l("Insert emoji")}
              type="button"
              class="emoji-button btn btn-ghost btn-sm text-[22px] btn-circle"
            >
              {!-- NOTE: triggered using .emoji-button in milkdown JS hook --}
              <#Icon iconify="ri:emotion-happy-line" class="w-4 h-4 text-base-content/70" />
            </button>

            <div
              :if={@create_object_type in [:message, :post, nil]}
              title={l("Mark the activity as sensitive")}
              class="relative z-30 flex items-center"
              id="sensitive_btn"
              phx-update="ignore"
            >
              <label
                phx-click={Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded(
                  "#smart_input_post_title",
                  ".btn_cw_toggle",
                  "btn-active"
                )}
                class="swap items-center btn btn-ghost btn-sm btn-circle btn_cw_toggle"
              >
                <input type="checkbox" name="sensitive">
                <#Icon iconify="ri:alert-line" class="swap-off w-4 h-4 text-base-content/60" />
                <#Icon iconify="ri:alert-fill" class="swap-on w-4 h-4 text-base-content/60" />
              </label>
            </div>

            <button id="bold_btn" type="button" class="bold_btn btn btn-ghost btn-sm btn-circle">
              <#Icon iconify="ri:bold" class="w-4 h-4 text-base-content/60" />
            </button>

            <button id="italic_btn" type="button" class="italic_btn btn btn-ghost btn-sm btn-circle">
              <#Icon iconify="ri:italic" class="w-4 h-4 text-base-content/60" />
            </button>
            <!-- <div phx-hook="Tooltip" id="wyswyg_actions" class="">
              <label tabindex="0" class="tooltip-button btn btn-ghost btn-sm btn-circle">
                <#Icon iconify="ic:baseline-text-format" class="w-5 h-5 text-base-content/60" />
              </label>
              <ul
                tabindex="0"
                class="tooltip z-[9999] menu shadow bg-base-200 p-1 rounded w-14 absolute top-0 left-0 hidden"
              >
                <li>
                  <button id="heading_btn" type="button" class="heading_btn">
                    <#Icon iconify="ri:heading" class="w-4 h-4 text-base-content/70" />
                  </button>
                </li>
                <li>
                  <button id="bold_btn" type="button" class="bold_btn">
                    <#Icon iconify="ri:bold" class="w-4 h-4 text-base-content/70" />
                  </button>
                </li>
                <li>
                  <button id="italic_btn" type="button" class="italic_btn">
                    <#Icon iconify="ri:italic" class="w-4 h-4 text-base-content/70" />
                  </button>
                </li>
              </ul>
            </div> -->
            <div class="flex flex-1 gap-2">
              {#if @create_object_type != :message && !e(@smart_input_opts, :recipients_editable, nil)}
                <StatelessComponent
                  module={maybe_component(Bonfire.Boundaries.Web.SetBoundariesButtonLive, @__context__)}
                  to_boundaries={@to_boundaries}
                  boundary_preset={@boundary_preset}
                  preview_boundary_for_id={@preview_boundary_for_id}
                  preview_boundary_for_username={@preview_boundary_for_username}
                  preview_boundary_verbs={@preview_boundary_verbs}
                  to_circles={@to_circles}
                />
              {/if}
              <div phx-hook="Tooltip" class="hidden md:block" id="additional_actions">
                <label tabindex="0" class="tooltip-button btn btn-ghost btn-sm btn-circle">
                  <#Icon solid="DotsHorizontal" class="w-5 h-5 text-base-content/60" />
                </label>
                <ul
                  tabindex="0"
                  class="tooltip p-1 z-50 menu shadow bg-base-200 rounded absolute top-0 left-0 hidden w-52"
                >
                  <li :if={module_enabled?(Bonfire.Boundaries.Web.PreviewBoundariesLive, @__context__)}>
                    <button
                      type="button"
                      phx-click={JS.show(to: "#boundaries_preview")
                      |> JS.hide(to: "#composer_container")}
                      class="flex items-center"
                      title={l("Preview boundaries")}
                    >
                      <#Icon iconify="mdi:eye-outline" class="w-4 h-4 gap-2 !text-base-content/70" />
                      <span class="text-base-content/70 text-sm">{l("Preview boundaries")}</span>
                    </button>
                  </li>
                  <li>
                    <button
                      :if={@enable_thread_title}
                      type="button"
                      phx-click={Bonfire.UI.Common.SmartInput.LiveHandler.toggle_expanded(
                        "#smart_input_thread_title",
                        ".btn_title_toggle",
                        "btn-active"
                      )}
                      class="flex items-center gap-2 btn_title_toggle"
                    >
                      <#Icon iconify="solar:text-bold" class="w-4 h-4 text-base-content/70" />
                      <span class="text-sm text-base-content">{l("Add a title")}</span>
                    </button>
                  </li>
                  <!-- <li>
                    <button
                      phx-click={LiveHandler.minimize()}
                      phx-target="#smart_input"
                      type="button"
                      class="flex items-center gap-2"
                    >
                      {!-- x-on:click=" ... ; smart_input_fullscreen = false" --}
                      <#Icon solid="Minus" class="w-4 h-4 text-base-content/70" />
                      <span class="text-sm text-base-content/70">{l("Minimize")}</span>
                    </button>
                  </li> -->
                </ul>
              </div>
            </div>

            <button
              type="submit"
              id="submit_btn"
              x-on:click="$dispatch('submit')"
              phx-disable-with={if @create_object_type == :message,
                do: l("Sending..."),
                else: l("Posting...")}
              class="capitalize flex-1 rounded justify-self-end btn-sm btn btn-primary"
              disabled={e(@smart_input_opts, :submit_disabled, nil)}
            >
              <#Icon iconify="majesticons:send" class="w-4 h-4" />
              <span :if={@showing_within == :page} class="">{l("Publish")}</span>
            </button>
          </div>
        </div>

        <input type="hidden" name="thread_id" value={e(@smart_input_opts, :id, nil)}>

        <input type="hidden" name="reply_to[reply_to_id]" value={@reply_to_id}>
        <input type="hidden" name="reply_to[thread_id]" value={@context_id}>
        {!-- FIXME: should not thread using context like a group or topic --}
        <input type="hidden" name="context_id" value={@context_id}>
        <input type="hidden" name={:create_object_type} value={@create_object_type}>

        <StatelessComponent
          module={maybe_component(Bonfire.Boundaries.Web.BoundariesSelectionLive, @__context__)}
          to_boundaries={@to_boundaries}
          to_circles={@to_circles}
          exclude_circles={@exclude_circles}
          context_id={@context_id}
        />

        <input :for={mention <- e(@mentions, [])} type="hidden" name="mentions[]" value={mention}>

        <input
          :for={{circle, role} <- e(@to_circles, []) |> debug("to_circless")}
          type="hidden"
          data-role="circle-enum"
          name={"to_circles[#{id(circle)}][]"}
          value={role}
        />
        <input
          :for={{circle, role} <- e(@exclude_circles, []) |> debug("exclude_circless")}
          type="hidden"
          data-role="circle-enum"
          name={"to_circles[#{id(circle)}][]"}
          value={role}
        />

        <input
          :for={value when is_binary(value) <- e(@to_circles, [])}
          type="hidden"
          data-role="circle-binary"
          name="to_circles[]"
          value={value}
        />
      </div>
    </div>
  </div>
</div>
