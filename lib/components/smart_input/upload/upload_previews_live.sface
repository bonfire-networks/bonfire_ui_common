
<div
  :if={Enum.count(@uploads.files.entries) > 0}
  id={deterministic_dom_id(__MODULE__, nil, "upload-preview", @parent_id)}
  class="p-2 pt-0 uploads_preview"
>
        <!-- phx-update="ignore" -->
  <div class="flex flex-col p-2 bg-base-content/5 gap-2 dividy-y divide-base-content/10 rounded-xl">
    {#for {entry, i} <- Enum.with_index(@uploads.files.entries)}
      <article
        id={to_string(i) <> deterministic_dom_id(__MODULE__, i, "upload-preview-entry", @parent_id)}
        data-img={"phx-preview-#{i}"}
        data-ref={entry.upload_ref}
        class="relative flex  gap-2 upload-entry rounded w-full"
      >
        {!-- phx-hook="imageMetadata" --}

        <figure class="w-[80px] figure-upload overflow-hidden">
          {#if String.starts_with?(entry.client_type, "image")}
            {!-- render a client-side preview --}
              <Phoenix.Component.live_img_preview class="w-[80px] h-[80px] object-contain" entry={entry} />
            <figcaption class="sr-only">{entry.client_name}</figcaption>
          {#elseif String.contains?(entry.client_type, "pdf")}
            <div class="w-full rounded h-[48px] flex items-center place-content-center justify-center">
              <#Icon iconify="bxs:file-pdf" class="w-10 h-10" />
            <figcaption class="m-1 text-xs truncate">{entry.client_name}</figcaption>
            </div>
          {#elseif String.starts_with?(entry.client_type, "video")}
            <div class="w-full rounded h-[48px] flex items-center place-content-center justify-center">
              <#Icon iconify="majesticons:video" class="w-10 h-10" />
            <figcaption class="m-1 text-xs truncate">{entry.client_name}</figcaption>
            </div>
          {#elseif String.starts_with?(entry.client_type, "audio")}
            <div class="w-full rounded h-[48px] flex items-center place-content-center justify-center">
              <#Icon iconify="lucide:audio-lines" class="w-10 h-10" />
            <figcaption class="x-1 text-xs truncate">{entry.client_name}</figcaption>
            </div>
          {#else}
            <div class="w-full rounded h-[48px] flex items-center place-content-center justify-center">
              <#Icon iconify="carbon:document" class="w-10 h-10" />
            <figcaption class="m-1 text-xs truncate">{entry.client_name}</figcaption>
            </div>
          {/if}
        </figure>

        {#for err <- upload_errors(@uploads.files, entry)}
          <p class="alert alert-warning p-1 text-xs">{error_to_string(err)} {l("Please remove it before continuing.")}</p>
        {#else}
          <div class="flex flex-col gap-1 flex-1">
            <textarea
              id={deterministic_dom_id(__MODULE__, entry.ref, "upload_description", @parent_id)}
              name={"upload_metadata[#{entry.ref}][label]"}
              phx-update="ignore"
              placeholder="Please describe/transcribe the uploaded file"
              class="textarea resize-none w-full lg:text-sm"
            />
          </div>
        {/for}

        <!-- <Bonfire.UI.Common.InlineModalLive
          id={"upload_#{entry.ref}_description"}
          title_text={l("Add an alternative description")}
          value={nil}
          cancel_label={l("Done")}
        >
          <div class="mt-4">
            <div class="alert alert-info alert-soft" role="alert">
              <#Icon solid="InformationCircle" class="w-5 h-5 shrink-0" />
              <span class="">
                {l(
                  "Adding an alternative description will improve the accessibility of your content, helping visually impaired people and others using screen reading tools."
                )}</span>
            </div>
          </div>
          <div class="px-1 mt-3">
            <textarea
              name={"upload_metadata[#{entry.ref}][label]"}
              placeholder="Type here"
              class="w-full mt-3 textarea bg-base-content/10"
            />
            {!-- TODO: edit previously entered desc --}
          </div>
          <:open_btn>
            <button
              type="button"
              class="absolute z-20 font-medium normal-case rounded glass top-2 left-2 btn btn-xs max-w-[100px]"
              aria-label="Add description"
            >
              <span class="">{l("Edit caption")}</span>
            </button>
          </:open_btn>
        </Bonfire.UI.Common.InlineModalLive> -->
      <div class="flex flex-col gap-2">
        <button
          type="button"
          class="btn-danger btn-sm lg:btn-xs btn btn-circle"
          phx-click="Bonfire.UI.Common.SmartInput:cancel-upload"
          phx-target={@event_target}
          phx-value-ref={entry.ref}
          aria-label="cancel"
        >
          <#Icon iconify="ph:x-duotone" class="w-4 h-4" />
          <span class="sr-only">{l("Remove")}</span>
        </button>
           {#if String.starts_with?(entry.client_type, "image")}
              <div
                data-tip={l("Select as cover")}
                class="tooltip tooltip-left"
                id={deterministic_dom_id(__MODULE__, entry.ref, "cover_selector", @parent_id)}
              >
                <input
                  type="hidden"
                  name={"upload_metadata[#{entry.ref}][primary_image]"}
                  value={if @selected_cover == entry.ref, do: "true", else: ""}
                  id={deterministic_dom_id(__MODULE__, entry.ref, "primary_image", @parent_id)}
                />
                <button
                  type="button"
                  class={"btn-sm lg:btn-xs btn btn-circle", "btn-primary": @selected_cover == entry.ref}
                  phx-click="Bonfire.UI.Common.SmartInput:toggle-cover-image"
                  phx-target={@event_target}
                  phx-value-ref={entry.ref}
                >
                  <#Icon iconify="ph:asterisk-duotone" class="w-4 h-4" />
                  <span class="sr-only">{l("Select as cover")}</span>
                </button>
              </div>
            {/if}

      </div>
        {!-- a regular click event whose handler will invoke Phoenix.LiveView.cancel_upload/3 --}
      </article>
    {/for}
  </div>
  {!-- <div class="flex items-center justify-end">
    <div class="form-control">
      <label class="label py-1 cursor-pointer">
        <input
          type="checkbox"
          name="sensitive"
          class="toggle toggle-primary toggle-text-xs"
          checked={Settings.get([Bonfire.UI.Common.UploadPreviewsLive, :mark_as_sensitive], false, @__context__)}
        />
        <span class="label-text text-base-content/70 text-text-xs ml-2">{l("Mark as sensitive")}</span>
      </label>
    </div>
  </div> --}
  {#for err <- upload_errors(@uploads.files)}
    <p class="alert alert-danger">{error_to_string(err)}</p>
  {/for}
</div>