
<div class="w-full border rounded-lg border-base-content/30">
  <div class="flex items-center rounded-lg">
    <span class="inline-flex items-center h-10 px-3 border-r rounded-l-lg border-base-content/30 text-base-content text-opacity-70 sm:text-sm"> {l "To"} </span>

    {#if is_list(e(assigns, :to_circles, nil)) and length(e(assigns, :to_circles, []))>0}
      <input 
        :for={{name, id} <- e(assigns, :to_circles, [])} 
        type="hidden" 
        name="to_circles[]"
        placeholder={l "Select the participants"} 
        label={name} 
        value={id} 
      />
      <span class="px-3">{Enum.map_join(e(assigns, :to_circles, []), " ; ", &elem(&1, 0))}</span>
    {#else}

      <!-- <Bonfire.UI.Common.MultiselectLive.UserSelectorLive
        selected_options={e(assigns, :to_circles, [])}
        label={"Send to:"}
        form_input_name="to_circles[]"
        context_id={e(assigns, :context_id, nil)}
      /> -->

      <div
        class="flex-1"
        id={:select_recipients}
        phx-hook="InputOrSelectOne"
        >
        <input name="to_circles" class="!text-slate-800 flex-1 w-full h-10 bg-transparent border-0 tagify border-base-content" />
        <select class="tagify hide !text-slate-800">
          {#for user <- @preloaded_recipients}
            <option class="!text-slate-800" value={e(user, :edge, :object, :id, nil)}>{e(user, :edge, :object, :profile, :name, "")} - {Bonfire.Me.Characters.display_username(e(user, :edge, :object, nil))}</option>
          {/for}
        </select>
      </div>
    {/if}

  </div>
</div>
