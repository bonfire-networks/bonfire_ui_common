<div 
  :if={current_user(assigns) != nil and e(assigns, :hide_smart_input, nil) != true}
  >
  
  {#if Settings.get([:ui, :smart_input_as], nil, assigns)==:sidebar and e(assigns, :thread_mode, nil) != :flat}

    <Bonfire.UI.Common.SmartInputLive
      id={:smart_input} 
      hide_smart_input={e(assigns, :hide_smart_input, nil)}
      current_user={current_user(assigns)}
      showing_within={e(assigns, :showing_within, nil)}
      reply_to_id={e(assigns, :reply_to_id, "")}
      thread_id={@thread_id}
      create_activity_type={e(assigns, :create_activity_type, nil)}
      thread_mode={e(assigns, :thread_mode, nil)}
      to_boundaries={e(assigns, :to_boundaries, [])}
      to_circles={e(assigns, :to_circles, [])}
      smart_input_prompt={@smart_input_prompt}
      smart_input_text={@smart_input_text}
    />

  {#else}
  
    <button 
      @click="show_smart_input_modal = true"
      type="button" 
      class="flex items-center w-full mb-1 normal-case rounded-full btn-wide btn btn-primary"> 
      <Solid.PencilAltIcon class="inline-block w-5 h-5 mr-2" />
      {e(assigns, :smart_input_prompt, l "Compose a post")}
    </button>
    <div 
      class="absolute bottom-0 z-50 transition-all w-[24rem] shadow-xl right-4 max-h-[100vh] overflow-x-auto"
      :class="{
        '!w-[40rem]': show_smart_input_modal,
        '!w-auto left-8 top-8': show_smart_input_modal_fullscreen 
        }"
    >
      <header 
        class="flex flex-row w-full p-2 rounded-t bg-base-200 flex-align-items-stretch flex-nowrap">
        <span 
          @click="show_smart_input_modal = ! show_smart_input_modal"
          class="flex-1 text-sm cursor-move text-ellipsis user-select-none"
          x-text={"title_text || '#{e(assigns, :smart_input_prompt, l "New post")}'"}
          >
          {e(assigns, :smart_input_prompt, l "New post")}
        </span>
        <div class="flex items-center space-x-5">
          <button 
            @click="show_smart_input_modal = ! show_smart_input_modal ; show_smart_input_modal_fullscreen = false"
            type="button" 
            class="flex btn btn-xs btn-ghost btn-square" 
            data-testid="composer:minimize-button" 
            aria-describedby="tooltip-5527">
            <span x-show="show_smart_input_modal">
              <Outline.ChevronDoubleDownIcon class="w-4 h-4 stroke-1 text-base-content/70" />
              <span class="sr-only">{l "Minimize"}</span>
            </span>
            <span x-show="!show_smart_input_modal">
              <Outline.ChevronDoubleUpIcon class="w-4 h-4 stroke-1 text-base-content/70" />
              <span class="sr-only">{l "Maximise"}</span>
            </span>
          </button>
          <button 
            @click="maximize_smart_input_modal()"
            type="button" 
            class="flex btn btn-xs btn-ghost btn-square" 
            data-testid="composer:maximize-button" 
            aria-describedby="tooltip-5528">
            <Outline.ArrowsExpandIcon class="w-4 h-4 stroke-1 text-base-content/70" />
            <span class="sr-only">{l "Expand full screen"}</span>
          </button>
          <button 
            phx-click="reset"
            phx-target="#smart_input"
            @click="show_smart_input_modal = false; show_smart_input_modal_fullscreen = false "
            type="button" 
            class="flex btn btn-xs btn-ghost btn-square" 
            data-testid="composer:close-button" 
            aria-describedby="tooltip-5529">
            <Outline.XIcon class="w-4 h-4 stroke-1 text-base-content/70" />
            <span class="sr-only">{l "Close"}</span>
          </button>
        </div>
      </header>

      <Bonfire.UI.Common.SmartInputLive
        id={:smart_input} 
        hide_smart_input={e(assigns, :hide_smart_input, nil)}
        current_user={current_user(assigns)}
        showing_within={e(assigns, :showing_within, nil)}
        reply_to_id={e(assigns, :reply_to_id, "")}
        thread_id={@thread_id}
        create_activity_type={e(assigns, :create_activity_type, nil)}
        thread_mode={e(assigns, :thread_mode, nil)}
        to_boundaries={e(assigns, :to_boundaries, [])}
        to_circles={e(assigns, :to_circles, [])}
        smart_input_prompt={@smart_input_prompt}
        smart_input_text={@smart_input_text}
      />

    </div>
  {/if}
</div>