  <!-- x-on:resize.window="show_smart_input_fullscreen = (window.innerWidth > 1200) ? false : show_smart_input_fullscreen" -->

<div 
  :class="show_smart_input_fullscreen ? '!grid !overflow-hidden' : ''"
  class="items-start hidden grid-flow-row gap-3 overflow-x-hidden overflow-y-auto widget md:grid auto-rows-min ">
  {#if current_user(assigns)}

    <div class="sticky top-0 z-20">
      <Bonfire.UI.Common.LogoLive />
    </div>

    <Bonfire.UI.Common.UserMenuLive current_user={current_user(assigns)} />

    <Bonfire.UI.Common.SmartInputContainerLive
      :if={e(assigns, :hide_smart_input, nil) != true}
      hide_smart_input={e(assigns, :hide_smart_input, nil)}
      current_user={current_user(assigns)}
      showing_within={e(assigns, :showing_within, nil)}
      reply_to_id={e(assigns, :reply_to_id, "")}
      thread_id={@thread_id}
      create_activity_type={e(assigns, :create_activity_type, nil)}
      thread_mode={e(assigns, :thread_mode, nil)}
      to_boundaries={@to_boundaries}
      to_circles={e(assigns, :to_circles, [])}
      smart_input_prompt={@smart_input_prompt}
      smart_input_text={@smart_input_text}
    />

    <nav 
      :if={e(assigns, :hide_smart_input, nil) != true}
      role="navigation"
      aria-label={l "Main navigation"}>
      <ul 
        class={"text-sm menu menu-compact",
        "lg:menu-normal": !Settings.get([:ui, :compact], false, assigns)
        }>
        <li>
          <LiveRedirect 
            to={path(Bonfire.Common.Config.get(:user_home_page, Bonfire.UI.Social.HomeLive))} 
            class={"rounded-full relative",  "font-bold bg-base-content/10": @page == "feed"}
          >
            <Solid.NewspaperIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "feed"} />
            <span :if={@page == "feed"} class="sr-only">{l "Current Page:"} </span>
            {l "My feed"}
          </LiveRedirect>
        </li>
        <li class="tablet-lg:hidden">
          <LiveRedirect 
            to={"/search"}
            class={"rounded-full relative",  "font-bold bg-base-content/10": @page == "search"}
          >
            <Solid.SearchIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "search"} />
            <span :if={@page == "search"} class="sr-only">{l "Current Page:"} </span>
            {l "Search"}
          </LiveRedirect>
        </li>
        
        <li>
          <LiveRedirect 
            class={
            "rounded-full relative",  "font-bold bg-base-content/10": @page == "local"} 
            to={if current_user(@current_user), do: "/feed/local", else: "/local"}>
            <Solid.LocationMarkerIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "local"} />
            <span :if={@page == "local"} class="sr-only">{l "Current Page:"} </span>
            <span class="truncate ellipsis">{l "Local"}</span>
          </LiveRedirect> 
        </li>
        <li :if={current_user(@current_user) || Settings.get([:bonfire_social, :feeds, :federation, :show_guests], false, assigns)}>
          <LiveRedirect 
            class={
              "rounded-full relative",  "font-bold bg-base-content/10": @page == "federation"} 
            to={"/feed/federation"}>
            <Solid.GlobeIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "federation"} />
            <span :if={@page == "federation"} class="sr-only">{l "Current Page:"} </span>
            <span class="truncate ellipsis">{l "Federated"}</span>
          </LiveRedirect> 
        </li>

        <li>
          <LiveRedirect 
            to={path(:notifications)}
            class={"rounded-full relative",  "font-bold bg-base-content/10": @page == "notifications"}
          >
            <Solid.BellIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "notifications"} />
            <span :if={@page == "notifications"} class="sr-only">{l "Current Page:"} </span>
            {l "Notifications"}
            <Bonfire.UI.Common.BadgeCounterLive id={:notifications} class="indicator-item badge badge-secondary"/> 
          </LiveRedirect>
        </li>
        <li>
          <LiveRedirect 
            to={path(Bonfire.Data.Social.Message)} 
            class={
              "rounded-full relative",  "font-bold bg-base-content/10": @page == "messages"}>
              <Solid.MailIcon class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "messages"}/>
              <span :if={@page == "messages"} class="sr-only">{l "Current Page:"} </span>
              {l "Messages"}
              <Bonfire.UI.Common.BadgeCounterLive id={:inbox} class="indicator-item badge badge-secondary"/>
          </LiveRedirect>
        </li>

        <li>
          <LiveRedirect 
            to={"/my/likes"} 
            class={
              "rounded-full relative",  "font-bold bg-base-content/10": @page == "likes"}>
              <Solid.StarIcon  class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "likes"}/>
              <span :if={@page == "likes"} class="sr-only">{l "Current Page:"} </span>
              {l "Favourites"}
          </LiveRedirect>
        </li>

        <li>
          <LiveRedirect 
            to={"/settings"} 
            class={
              "rounded-full relative",  "font-bold bg-base-content/10": @page == "settings"}>
              <Solid.AdjustmentsIcon  class={"w-5 h-5 text-base-content/80", "!text-base-content": @page == "settings"}/>
              <span :if={@page == "settings"} class="sr-only">{l "Current Page:"} </span>
              {l "Settings"}
          </LiveRedirect>
        </li>

        <li>
          <LiveRedirect 
            to={"/logout"} 
            class={"rounded-full relative"}>
              <Solid.LogoutIcon  class={"w-5 h-5 text-base-content/80"}/>
              {l "Logout"}
          </LiveRedirect>
        </li>

      </ul>
    </nav>
    

    <div class="flex-col hidden gap-3 md:flex">
      {#if is_list(@sidebar_widgets[:users][:main])}
        <Surface.Components.Dynamic.Component
          :for={{component, component_assigns} <- @sidebar_widgets[:users][:main]}
          module={component}
          current_user={current_user(assigns)}
          {...component_assigns}
        />
      {/if}
    </div>

  {#else} <!-- GUESTS -->
    <Surface.Components.Dynamic.Component
      :for={{component, component_assigns} <- @sidebar_widgets[:guests][:main] || [ 
        {Bonfire.UI.Common.WidgetInstanceInfoLive, []},
        {Bonfire.UI.Social.WidgetTimelinesLive, [page: @page, widget_title: "Menu"]},
      ]}
      module={component}
      {...component_assigns}
    />
  {/if} 
  
</div>